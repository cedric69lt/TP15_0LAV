- hosts: all
  become: yes
  tasks:
    - fail:
        msg: "Le système d'exploitation doit être CentOS 8, et non {{ ansible_distribution }} {{ ansible_distribution_version }}"
      when: ansible_distribution != 'CentOS' or ansible_distribution_major_version != '8'

    - name: Mettre à jour les packages YUM
      yum:
        name: '*'
        state: latest
        update_cache: yes

    - name: Redémarrer le système et attendre la fin du redémarrage
      reboot:

    - name: Désactiver SWAP (exigence de Kubeadm)
      command: swapoff -a

    - name: Désactiver SWAP dans fstab (exigence de Kubeadm)
      replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
        replace: '# \1'

    - name: Créer un fichier vide pour le module Containerd
      copy:
        content: ""
        dest: /etc/modules-load.d/containerd.conf
        force: no

    - name: Configurer les modules pour Containerd
      blockinfile:
        path: /etc/modules-load.d/containerd.conf
        block: |
          overlay
          br_netfilter

    - name: Créer un fichier vide pour les paramètres sysctl de Kubernetes
      copy:
        content: ""
        dest: /etc/sysctl.d/99-kubernetes-cri.conf
        force: no

    - name: Configurer les paramètres sysctl pour Kubernetes
      lineinfile:
        path: /etc/sysctl.d/99-kubernetes-cri.conf
        line: "{{ item }}"
      with_items:
        - 'net.bridge.bridge-nf-call-iptables  = 1'
        - 'net.ipv4.ip_forward                 = 1'
        - 'net.bridge.bridge-nf-call-ip6tables = 1'

    - name: Appliquer les paramètres sysctl sans redémarrage
      command: sysctl --system

    - name: Installer le paquet YUM Transport HTTPS
      yum:
        name: yum-utils
        state: present

    - name: Ajouter la clé GPG de Docker
      rpm_key:
        key: sudo rpm --import https://download.docker.com/linux/centos/gpg
        state: present

    - name: Ajouter le dépôt YUM de Docker
      yum_repository:
        name: Docker
        description: Docker Repository
        baseurl: https://download.docker.com/linux/centos/8/$basearch/stable
        enabled: yes
        gpgcheck: yes
        gpgkey: sudo rpm --import https://download.docker.com/linux/centos/gpg

    - name: Ajouter la clé GPG de Kubernetes
      rpm_key:
        key: sudo rpm --import https://packages.cloud.google.com/yum/doc/yum-key.gpg
        state: present

    - name: Ajouter le dépôt YUM de Kubernetes
      yum_repository:
        name: Kubernetes
        description: Kubernetes Repository
        baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-$basearch
        enabled: yes
        gpgcheck: yes
        gpgkey: sudo rpm --import https://packages.cloud.google.com/yum/doc/yum-key.gpg 

    - name: Installer Containerd
      yum:
        name: containerd.io
        state: present

    - name: Créer le répertoire Containerd
      file:
        path: /etc/containerd
        state: directory

    - name: Ajouter la configuration Containerd
      command: /usr/bin/containerd config default > /etc/containerd/config.toml

    - name: Configurer le pilote cgroup systemd pour Containerd
      lineinfile:
        path: /etc/containerd/config.toml
        regexp: '            SystemdCgroup = false'
        line: '            SystemdCgroup = true'

    - name: Activer et démarrer le service Containerd
      systemd:
        name: containerd
        state: restarted
        enabled: yes
        daemon_reload: yes

    - name: Installer Kubelet
      yum:
        name: kubelet-1.27.*
        state: present

    - name: Installer Kubeadm
      yum:
        name: kubeadm-1.27.*
        state: present

    - name: Activer le service Kubelet et le démarrer de manière persistante
      systemd:
        name: kubelet
        state: started
        enabled: yes

    - name: Charger le module kernel br_netfilter
      modprobe:
        name: br_netfilter
        state: present

    - name: Définir bridge-nf-call-iptables
      sysctl:
        name: net.bridge.bridge-nf-call-iptables
        value: 1

    - name: Définir ip_forward
      sysctl:
        name: net.ipv4.ip_forward
        value: 1

    - name: Vérifier les arguments Kubelet dans la configuration de Kubelet
      shell: grep "^Environment=\"KUBELET_EXTRA_ARGS=" /etc/systemd/system/kubelet.service.d/10-kubeadm.conf || true
      register: check_args

    - name: Ajouter les arguments d'exécution dans la configuration de Kubelet
      lineinfile:
        dest: "/etc/systemd/system/kubelet.service.d/10-kubeadm.conf"
        line: "Environment=\"KUBELET_EXTRA_ARGS= --runtime-cgroups=/system.slice/containerd.service --container-runtime-endpoint=unix:///run/containerd/containerd.sock\""
        insertafter: '\[Service\]'
      when: check_args.stdout == ""

    - name: Redémarrer le système et attendre la fin du redémarrage
      reboot:

- hosts: master
  become: yes
  tasks:
    - name: Installer Kubectl
      yum:
        name: kubectl-1.27.*
        state: present
        enablerepo: Kubernetes
        disablerepo: '*'
        allow_downgrade: yes
